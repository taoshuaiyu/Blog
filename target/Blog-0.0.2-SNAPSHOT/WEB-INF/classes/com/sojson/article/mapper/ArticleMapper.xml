<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.sojson.article.dao.ArticleMapper" >
  <resultMap id="BaseResultMap" type="com.sojson.article.entiy.Article" >
    <id column="id" property="id" jdbcType="BIGINT" />
    <result column="title" property="title" jdbcType="VARCHAR" />
    <result column="content" property="content" jdbcType="VARCHAR" />
    <result column="type" property="type" jdbcType="BIGINT" />
    <result column="status" property="status" jdbcType="BIGINT" />
    <result column="create_date" property="createDate" jdbcType="TIMESTAMP" />
    <result column="update_date" property="updateDate" jdbcType="TIMESTAMP" />
    <result column="create_user_id" property="createUserId" jdbcType="BIGINT" />
    <result column="update_user_id" property="updateUserId" jdbcType="BIGINT" />
  </resultMap>
  <sql id="Base_Column_List" >
    id, title, content, type, status,create_date, update_date,create_user_id,update_user_id
  </sql>
  <sql id="limit_sql">
    <if test="page_sql != null and page_sql != ''">
      ${page_sql}
    </if>
  </sql>

  <sql id="where_all">
    <where>
      <if test="findContent != null and findContent !='' " >
        and (
        LOWER(title) like  LOWER(CONCAT("%",#{findContent,jdbcType=VARCHAR},"%"))
        )
      </if>
    </where>
  </sql>
  <select id="findAll" resultMap="BaseResultMap" >
    select
    <include refid="Base_Column_List" />
    from article
    <include refid="where_all"/>
    <include refid="limit_sql" />
  </select>
  <select id="findCount" resultMap="BaseResultMap" >
    select count(id) from  article
    <include refid="where_all" />
  </select>

  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long" >
    select
    <include refid="Base_Column_List" />
    from article
    where id = #{id,jdbcType=BIGINT}
  </select>

  <insert id="insert" useGeneratedKeys="true" keyProperty="id" parameterType="com.sojson.article.entiy.Article" >
  insert into article (title, content,
  type, status, create_date,update_date,create_user_id,update_user_id
  )
  values ( #{title,jdbcType=VARCHAR}, #{content,jdbcType=VARCHAR},
  #{type,jdbcType=BIGINT}, #{status,jdbcType=BIGINT}, NOW(),#{updateDate,jdbcType=BIGINT},#{createUserId,jdbcType=BIGINT},#{updateUserId,jdbcType=BIGINT}
  )
  </insert>

  <update id="updateByPrimaryKey" parameterType="com.sojson.article.entiy.Article" >
    update article
    set title = #{title,jdbcType=VARCHAR},
    content = #{content,jdbcType=VARCHAR},
    type = #{type,jdbcType=VARCHAR},
    status = #{status,jdbcType=BIGINT},
    update_date = NOW(),
    update_user_id = #{updateUserId,jdbcType=BIGINT}
    where id = #{id,jdbcType=BIGINT}
  </update>
</mapper>
